{"mappings":"gfAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAiB,CACnBC,SAAU,YACVC,cAAc,EAChBC,QAAS,IACPC,SAAQ,GAENC,EAAO,CACXC,WAAYC,SAASC,cAAc,qBACnCC,UAAWF,SAASC,cAAc,oBAClCE,OAAQH,SAASC,cAAc,uBAsBjC,SAASG,EAAcV,EAAUW,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3B,IAAMC,EAAgBC,KAAKC,SAAW,GACpCC,YAAW,WACPH,EACHF,EAAQ,CAAEb,WAAUW,UAEpBG,EAAO,CAAEd,WAAUW,S,GAEjBA,E,IA7BmBL,SAASC,cAAc,UAE/BY,iBAAiB,SAAS,SAACC,GAK/C,IAJE,IAAIC,EAAQC,OAAOlB,EAAKC,WAAWkB,OAC7BC,EAAOF,OAAOlB,EAAKI,UAAUe,OAC7Bd,EAASa,OAAOlB,EAAKK,OAAOc,OAE3BE,EAAQ,EAAGA,GAAShB,EAAQgB,IACjCf,EAAce,EAAOJ,GAChBK,MAAK,SAAAC,G,IAAG3B,EAAQ2B,EAAR3B,SAAUW,EAAKgB,EAALhB,MACnBd,EAAA+B,OAAOC,QAAQ,uBAAwCC,OAAf9B,EAAS,QAAY8B,OAANnB,EAAM,MAAKZ,E,IAEjEgC,OAAM,SAAAJ,G,IAAG3B,EAAQ2B,EAAR3B,SAAUW,EAAKgB,EAALhB,MACpBd,EAAA+B,OAAOI,QAAQ,sBAAqCF,OAAf9B,EAAS,QAAY8B,OAANnB,EAAM,MAAKZ,E,IAEnEsB,GAASG,EAEXJ,EAAEa,gB","sources":["src/js/03-promises.js"],"sourcesContent":["import { Notify } from 'notiflix/build/notiflix-notify-aio';\n\nconst messageOptions = {\n    position: \"right-top\",\n    clickToClose: true,\n  timeout: 5000,\n    useIcon:false,\n}\nconst refs = {\n  firstDelay: document.querySelector('input[name=delay]'),\n  delayStep: document.querySelector('input[name=step]'),\n  amount: document.querySelector('input[name=amount]'),\n} \nconst creatPromisesButton = document.querySelector('button');\n\ncreatPromisesButton.addEventListener('click', (e) => {\n  let delay = Number(refs.firstDelay.value);\n  const step = Number(refs.delayStep.value);\n  const amount = Number(refs.amount.value);\n\nfor (let index = 1; index <= amount; index++) {\n    createPromise(index, delay)\n        .then(({ position, delay }) => {\n        Notify.success(`✅ Fulfilled promise ${position} in ${delay}ms`, messageOptions);\n        })\n        .catch(({ position, delay }) => {\n        Notify.failure(`❌ Rejected promise ${position} in ${delay}ms`, messageOptions);\n        });\n    delay += step;\n} \n  e.preventDefault();\n});\n\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    const shouldResolve = Math.random() > 0.3;\n      setTimeout(() => { \n      if (shouldResolve) {\n       resolve({ position, delay });\n      } else {\n       reject({ position, delay });\n      }\n      }, delay);\n     }\n  )\n};\n\n\n"],"names":["$h6c0i","parcelRequire","$ce04d3a99e08e73b$var$messageOptions","position","clickToClose","timeout","useIcon","$ce04d3a99e08e73b$var$refs","firstDelay","document","querySelector","delayStep","amount","$ce04d3a99e08e73b$var$createPromise","delay","Promise","resolve","reject","shouldResolve","Math","random","setTimeout","addEventListener","e","delay1","Number","value","step","index","then","param","Notify","success","concat","catch","failure","preventDefault"],"version":3,"file":"03-promises.ef741eee.js.map"}